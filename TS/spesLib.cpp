/*
	spesLib.cpp
			2012.10.12  by T.Oda
 */

#include <stdio.h>
#include <string.h>	// memset
#include <stdlib.h>	// exit

#include "spesLib.h"

int bExifReplace=0;

int SPS( FILE *out, unsigned char *buf, int size, int frame_rate )
{
unsigned char Header[80];
// ---------
int Size=0;
int nSize=0;
int n;
	memset( Header, 0, 80 );

	unsigned char *nBuf = &buf[6];
	int nSPS = buf[5]&31;
	fprintf( stdout, "nSPS=%d\n", nSPS );
	for( n=0; n<nSPS; n++ )
	{
	    Size = (nBuf[0]<<8) | nBuf[1];
	    nSize=Size+18;
	    Header[0] = (nSize>>24)&0xFF;
	    Header[1] = (nSize>>16)&0xFF;
	    Header[2] = (nSize>> 8)&0xFF;
	    Header[3] = (nSize>> 0)&0xFF;
	    Header[4] = 0x31;	// SPS
	    Header[5] = 0x03;	// lengthSizeMinusOne

	    if( frame_rate>=0 )
	    {
	    	Header[6] = 0x40;
		Header[7] = frame_rate;
	    }

	    fwrite( Header, 1, 16, out );

	    fprintf( stdout, "SPS Size=0x%X\n", Size );
#if 0	// for netflix
	    if( nBuf[2]==0x67 )
	    if( nBuf[3]==0x80 )	// Stereo High ?
	    	nBuf[3]=0x64;	// High Profile
#endif
	    fwrite( &nBuf[0], 1, Size+2, out );
	    nBuf+=(Size+2);
	}
// ---------
	int nPPS = nBuf[0];
	fprintf( stdout, "nPPS=%d\n", nPPS );
	nBuf+=1;
	for( n=0; n<nPPS; n++ )
	{
	    Size = (nBuf[0]<<8) | nBuf[1];
	    nSize = Size+18;
	    Header[0] = (nSize>>24)&0xFF;
	    Header[1] = (nSize>>16)&0xFF;
	    Header[2] = (nSize>> 8)&0xFF;
	    Header[3] = (nSize>> 0)&0xFF;
	    Header[4] = 0x32;	// PPS
	    Header[5] = 0x03;	// lengthSizeMinusOne
	    fwrite( Header, 1, 16, out );

	    fprintf( stdout, "PPS Size=0x%X\n", Size );
	    fwrite( &nBuf[0], 1, Size+2, out );
	    nBuf+=(Size+2);
	}

	return 0;
}

static int nFrame = 0;

int AVC( FILE *out, FILE *fp, int size, int DTS, int PTS )
{
int readed;
unsigned char Header[80];
int nSize=size+16;
//#define MAX_AVC_FRAMESIZE 1024*64*5
//#define MAX_AVC_FRAMESIZE 1024*64*9
#define MAX_AVC_FRAMESIZE 1024*64*12	// 306256[1].mp4
char buf[MAX_AVC_FRAMESIZE];
	if( size<1 )
	{
	    fprintf( stdout, "AVC() size=%d, skip\n", size );
	    return -1;
	}
	memset( Header, 0, 80 );
	Header[ 0] = (nSize>>24)&0xFF;
	Header[ 1] = (nSize>>16)&0xFF;
	Header[ 2] = (nSize>> 8)&0xFF;
	Header[ 3] = (nSize>> 0)&0xFF;
	Header[ 4] = 0x30;	// Frame data
	if( PTS!=(-1) )
	Header[ 5] |= 0x80;
	if( DTS!=(-1) )
	Header[ 5] |= 0x40;
	// Header[ 8] : PTS
	if( PTS!=(-1) )
	{
	Header[ 8] = (PTS>>24)&0xFF;
	Header[ 9] = (PTS>>16)&0xFF;
	Header[10] = (PTS>> 8)&0xFF;
	Header[11] = (PTS>> 0)&0xFF;
	}
	// Header[12] : DTS
	if( DTS!=(-1) )
	{
	Header[12] = (DTS>>24)&0xFF;
	Header[13] = (DTS>>16)&0xFF;
	Header[14] = (DTS>> 8)&0xFF;
	Header[15] = (DTS>> 0)&0xFF;
	}
	fwrite( Header, 1, 16, out );

	fprintf( stdout, "%5d : Frame Size=0x%X\n", nFrame++, size );

	if( size>=MAX_AVC_FRAMESIZE )
	{
	    fprintf( stdout, "AVC : Too large frame size(%d)\n", size );
	    exit( 1 );
	}
	readed = fread ( buf, 1, size, fp );
	fwrite( buf, 1, size, out );
	return 0;
}

int MPEG4H( FILE *out, unsigned char *buf, int size )
{
unsigned char Header[80];
// ---------
	memset( Header, 0, 80 );

	int Size = buf[0x19];
	int nSize=Size+16;
	Header[0] = (nSize>>24)&0xFF;
	Header[1] = (nSize>>16)&0xFF;
	Header[2] = (nSize>> 8)&0xFF;
	Header[3] = (nSize>> 0)&0xFF;
	Header[4] = 0x21;	// VOS/VO/VOL
	Header[5] = 0x00;	// 

	fwrite( Header, 1, 16, out );

	fprintf( stdout, "VOS Size=0x%X\n", Size );
	fwrite( &buf[0x1A], 1, Size, out );
// ---------

	return 0;
}

int MPEG4( FILE *out, FILE *fp, int size, int DTS, int PTS )
{
int readed;
unsigned char Header[80];
int nSize=size+16;
#define MAX_MPEG4_FRAMESIZE	1024*64
char buf[MAX_MPEG4_FRAMESIZE];
	if( size<1 )
	{
	    fprintf( stdout, "MPEG4() size=%d, skip\n", size );
	    return -1;
	}
	memset( Header, 0, 80 );
	Header[ 0] = (nSize>>24)&0xFF;
	Header[ 1] = (nSize>>16)&0xFF;
	Header[ 2] = (nSize>> 8)&0xFF;
	Header[ 3] = (nSize>> 0)&0xFF;
	Header[ 4] = 0x20;	// Frame data
	if( PTS!=(-1) )
	Header[ 5] |= 0x80;
	if( DTS!=(-1) )
	Header[ 5] |= 0x40;
	// Header[ 8] : PTS
	if( PTS!=(-1) )
	{
	Header[ 8] = (PTS>>24)&0xFF;
	Header[ 9] = (PTS>>16)&0xFF;
	Header[10] = (PTS>> 8)&0xFF;
	Header[11] = (PTS>> 0)&0xFF;
	}
	// Header[12] : DTS
	if( DTS!=(-1) )
	{
	Header[12] = (DTS>>24)&0xFF;
	Header[13] = (DTS>>16)&0xFF;
	Header[14] = (DTS>> 8)&0xFF;
	Header[15] = (DTS>> 0)&0xFF;
	}
	fwrite( Header, 1, 16, out );

	fprintf( stdout, "Frame Size=0x%X\n", size );

	if( size>=MAX_MPEG4_FRAMESIZE )
	{
	    fprintf( stdout, "MPEG4 : Too large size(%d)\n", size );
	    exit( 1 );
	}
	readed = fread ( buf, 1, size, fp );
	fwrite( buf, 1, size, out );
	return 0;
}

static unsigned char DHT_data[0x1A4] = {
 0xFF,0xC4,0x01,0xA2,
 0x00,0x00,0x01,0x05,0x01,0x01,0x01,0x01,
 0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
 0x09,0x0A,0x0B,0x01,0x00,0x03,0x01,0x01,0x01,0x01,
 0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
 0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
 0x08,0x09,0x0A,0x0B,0x10,0x00,0x02,0x01,
 0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,
 0x00,0x01,0x7D,0x01,0x02,0x03,0x00,0x04,
 0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,
 0x07,0x22,0x71,0x14,0x32,0x81,0x91,0xA1,
 0x08,0x23,0x42,0xB1,0xC1,0x15,0x52,0xD1,0xF0,0x24,
 0x33,0x62,0x72,0x82,0x09,0x0A,0x16,0x17,
 0x18,0x19,0x1A,0x25,0x26,0x27,0x28,0x29,0x2A,0x34,
 0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,
 0x45,0x46,0x47,0x48,0x49,0x4A,0x53,0x54,0x55,0x56,
 0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,
 0x67,0x68,0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,
 0x79,0x7A,0x83,0x84,0x85,0x86,0x87,0x88,
 0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,
 0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,
 0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,
 0xBA,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,
 0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,
 0xDA,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,
 0xE8,0xE9,0xEA,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,
 0xF8,0xF9,0xFA,0x11,0x00,0x02,0x01,0x02,
 0x04,0x04,0x03,0x04,0x07,0x05,0x04,0x04,0x00,0x01,
 0x02,0x77,0x00,0x01,0x02,0x03,0x11,0x04,
 0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
 0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,
 0xA1,0xB1,0xC1,0x09,0x23,0x33,0x52,0xF0,0x15,0x62,
 0x72,0xD1,0x0A,0x16,0x24,0x34,0xE1,0x25,
 0xF1,0x17,0x18,0x19,0x1A,0x26,0x27,0x28,0x29,0x2A,
 0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,
 0x45,0x46,0x47,0x48,0x49,0x4A,0x53,0x54,0x55,0x56,
 0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,
 0x67,0x68,0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,
 0x79,0x7A,0x82,0x83,0x84,0x85,0x86,0x87,
 0x88,0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,
 0x99,0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,
 0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,
 0xB9,0xBA,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,
 0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,
 0xD9,0xDA,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,
 0xE8,0xE9,0xEA,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,
 0xF9,0xFA
};

int MJPEGH( FILE *out )
{
char buf[16];
	int SPES_Size = 16+0x1A4;
	memset( buf, 0, 16 );
	buf[0] = (SPES_Size>>24)&0xFF;
	buf[1] = (SPES_Size>>16)&0xFF;
	buf[2] = (SPES_Size>> 8)&0xFF;
	buf[3] = (SPES_Size>> 0)&0xFF;
	buf[4] = 0x91;
	fwrite( buf, 1, 16, out );
	fwrite( DHT_data, 1, 0x1A4, out );
	return 0;
}

int MJPEG( FILE *out, FILE *fp, int size, int DTS, int PTS )
{
int readed;
unsigned char Header[80];
int nSize=size+16;
//#define MAX_MJPEG_FRAMESIZE 1024*64
//#define MAX_MJPEG_FRAMESIZE 1024*128	// 2012.10.11
//#define MAX_MJPEG_FRAMESIZE 1024*768	// 2012.11.14 for FullHD
//#define MAX_MJPEG_FRAMESIZE 1024*1024*2	// 2013.8.6 for 4K
#define MAX_MJPEG_FRAMESIZE 1024*1024*32	// 2013.8.13 for 8K
unsigned char *buf;
//char buf[MAX_MJPEG_FRAMESIZE];

	if( size>=MAX_MJPEG_FRAMESIZE )
	{
	    fprintf( stdout, "MJPEG : Too large size(%d)\n", size );
	    exit( 1 );
	}
	if( size<1 )
	{
	    fprintf( stdout, "MJPEG() size=%d, skip\n", size );
	    return -1;
	}
	buf = (unsigned char *)malloc( size );
	if( buf==NULL )
	{
	    fprintf( stdout, "Can't alloc buf(%d bytes)\n", size );
	    exit( 1 );
	}
	memset( buf, 0, size );
	memset( Header, 0, 80 );
	Header[ 0] = (nSize>>24)&0xFF;
	Header[ 1] = (nSize>>16)&0xFF;
	Header[ 2] = (nSize>> 8)&0xFF;
	Header[ 3] = (nSize>> 0)&0xFF;
	Header[ 4] = 0x90;	// Frame data
	if( PTS!=(-1) )
	Header[ 5] |= 0x80;
	if( DTS!=(-1) )
	Header[ 5] |= 0x40;
	Header[ 5] |= 0x04;	// TFF
	// Header[ 8] : PTS
	if( PTS!=(-1) )
	{
	Header[ 8] = (PTS>>24)&0xFF;
	Header[ 9] = (PTS>>16)&0xFF;
	Header[10] = (PTS>> 8)&0xFF;
	Header[11] = (PTS>> 0)&0xFF;
	}
	// Header[12] : DTS
	if( DTS!=(-1) )
	{
	Header[12] = (DTS>>24)&0xFF;
	Header[13] = (DTS>>16)&0xFF;
	Header[14] = (DTS>> 8)&0xFF;
	Header[15] = (DTS>> 0)&0xFF;
	}
	fwrite( Header, 1, 16, out );

	fprintf( stdout, "Frame Size=0x%X\n", size );

	readed = fread ( buf, 1, size, fp );
	fprintf( stdout, "%d bytes readed\n", readed );
	if( bExifReplace )
	{
	    int ii;
	    for( ii=0; ii<size; ii++ )
	    {
		if( buf[ii]==0xFF )
		    if( buf[ii+1]==0xE0 )
			if( buf[ii+2]==0x00 )
			    if( buf[ii+3]==0x10 )
			    {
				    buf[ii+4] = 'A';
				    buf[ii+5] = 'V';
				    buf[ii+6] = 'I';
				    buf[ii+7] = '1';
				    buf[ii+8] = 0;
				    break;
			    }
	    }
	}
	int written = fwrite( buf, 1, size, out );
	if( written<size )
	{
	    fprintf( stdout, "written=%d/%d\n", written, size );
	}
	return 0;
}

