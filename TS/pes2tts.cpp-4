
/*
	pes2tts.cpp
		2013.7.31  by T.Oda

		2013.11.29 : rate may be small in some stream
			start rate modified
		2013.12. 5 : Video and Audio
		2013.12. 9 : continuity counter NG : use nPacket[]
		2013.12.10 : outM.mts : merge multi pes
		             +E : expand to longest pes
		2013.12.11 : +M : MaxDiff : rateOK threshold
			     =A : AudioCodec
				AudioCodec==0 	// MPEG1_AUDIO
				AudioCodec==1 	// AC3 : Dolby Digital
				AudioCodec==2	// MPEG2_AUDIO
				AudioCodec==3	// MPEG4-AAC(HEAAC)
				AudioCodec==4	// MPEG2-AAC
		2013.12.18 : Support file[0:9]
		2013.12.19 : use MakePat
			     use MakePmt
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>	// memset

#include "tsLib.h"
#include "parseLib.h"

#include "main.h"

static int bDisplay=0;
static int AudioCodec=0;

#define TABLE_UNIT	8
#define MAX_FILE 256

static int MaxDiff=45000;	// 0.5sec

//int *Table[MAX_FILE];
// Table[0]=DTS
// Table[1]=PTS
// Table[2]=head_addr
// Table[3]=head_addr-l_head_addr
// Table[4]=DTS'-packet*188*90/rate
// Table[5]=DTS'
// Table[6]=space
void DumpTable( int *Table[], int nfile, int n, int diff )
{
	fprintf( stdout, 
	    "%5d : %8X %8X %8X %8X : %8X %8X :%3d (%7d)\n",
		n, 
		Table[nfile][n*TABLE_UNIT+0], 
		Table[nfile][n*TABLE_UNIT+1], 
		Table[nfile][n*TABLE_UNIT+2], 
		Table[nfile][n*TABLE_UNIT+3],
		Table[nfile][n*TABLE_UNIT+4], 
		Table[nfile][n*TABLE_UNIT+5],
		Table[nfile][n*TABLE_UNIT+6],
		diff
	    );
}

#if 0
static unsigned int CRC32[256] = {
0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc,
0x17c56b6b, 0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f,
0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a,
0x384fbdbd, 0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,
0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75, 0x6a1936c8,
0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3,
0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e,
0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,
0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84,
0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d, 0xd4326d90, 0xd0f37027,
0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022,
0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,
0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077,
0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c,
0x2e003dc5, 0x2ac12072, 0x128e9dcf, 0x164f8078, 0x1b0ca6a1,
0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,
0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb,
0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08,
0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d,
0x40d816ba, 0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,
0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692, 0x8aad2b2f,
0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044,
0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050, 0xe9362689,
0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683,
0xd1799b34, 0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59,
0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c,
0x774bb0eb, 0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,
0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53, 0x251d3b9e,
0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5,
0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48,
0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,
0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2,
0xe6ea3d65, 0xeba91bbc, 0xef68060b, 0xd727bbb6, 0xd3e6a601,
0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604,
0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,
0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6,
0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad,
0x81b02d74, 0x857130c3, 0x5d8a9099, 0x594b8d2e, 0x5408abf7,
0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,
0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd,
0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e,
0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b,
0x0fdc1bec, 0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,
0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654, 0xc5a92679,
0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12,
0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676, 0xea23f0af,
0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5,
0x9e7d9662, 0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06,
0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03,
0xb1f740b4
};
unsigned int crc32( unsigned char* data, int length )
{
    unsigned int crc = 0xFFFFFFFF;
    while ( length-- > 0 ) {
	crc = (crc<<8) ^ CRC32[((crc>>24) ^ (unsigned int)(*data++)) & 0xFF];
    }
    return crc;
}
#endif

#if 1
int MakePat( unsigned char *bytes, int PID[], int nPid )
{
int n;
int index=0;
int PatPid=0;	// always 0
int program=1;
int section_length = 9+nPid*4;
	bytes[ 0] = 0x47;
	bytes[ 1] = ((PatPid>>8)&0x1F) | 0x40;
	bytes[ 2] =  (PatPid>>0)&0xFF;
	bytes[ 3] = 0x10;	// no adapt+payload

	bytes[ 0+4] = 0x00;	// pointer_field
	bytes[ 1+4] = 0x00;	// table_id=00 : PAT
	bytes[ 2+4] = 0xB0;
	bytes[ 3+4] = section_length;
	bytes[ 4+4] = 00;		// transport_stream_id
	bytes[ 5+4] = 00;		// transport_stream_id
	bytes[ 6+4] = 0xC1;	// version_number, current_netxt_indicator
	bytes[ 7+4] = 0x00;	// section_number
	bytes[ 8+4] = 0x00;	// last_section_number
	index = 9+4;
	for( n=0; n<nPid; n++ )
	{
	    bytes[index++] = (program>>8)&0xFF;
	    bytes[index++] = (program>>0)&0xFF;
	    bytes[index++] = ((PID[n]>>8)&0xFF) | 0xE0;
	    bytes[index++] = ((PID[n]>>0)&0xFF);
	    program++;
	}
	unsigned int crc = crc32( &bytes[5], index-5 );
	bytes[index++] = (crc>>24)&0xFF;
	bytes[index++] = (crc>>16)&0xFF;
	bytes[index++] = (crc>> 8)&0xFF;
	bytes[index++] = (crc>> 0)&0xFF;

	return index;
}
#else
int MakePat( unsigned char *byteS, int PatPid )
{
	byteS[ 0] = 0x47;
	byteS[ 1] = ((PatPid>>8)&0x1F) | 0x40;
	byteS[ 2] =  (PatPid>>0)&0xFF;
	byteS[ 3] = 0x10;	// no adapt+payload

	byteS[ 4] = 0x00;
	byteS[ 5] = 0x00;
	byteS[ 6] = 0xB0;
	byteS[ 7] = 0x0D;
	byteS[ 8] = 0x00;
	byteS[ 9] = 0x00;
	byteS[10] = 0xC1;
	byteS[11] = 0x00;
	byteS[12] = 0x00;
	byteS[13] = 0x00;
	byteS[14] = 0x01;
	byteS[15] = 0xE1;
	byteS[16] = 0x00;
	byteS[17] = 0xB3;
	byteS[18] = 0x58;
	byteS[19] = 0x82;
	byteS[20] = 0xB7;
	return 0;
}
#endif
int MakePmt( unsigned char *bytes, 
	int program_number,
	int PgmPid,
	int PcrPid,
	int program_detail[], int nPid )
{
int n;
int index=0;
int section_length = 9+nPid*4;
int program_info_length=0;
	bytes[ 0] = 0x47;
	bytes[ 1] = ((PgmPid>>8)&0x1F) | 0x40;
	bytes[ 2] =  (PgmPid>>0)&0xFF;
	bytes[ 3] = 0x10;	// no adapt+payload

	bytes[ 0+4] = 0x00;	// pointer_field
	bytes[ 1+4] = 0x02;	// table_id=02 : PMT
	bytes[ 2+4] = 0xB0;
	bytes[ 3+4] = section_length;
	bytes[ 4+4] = (program_number>>8)&0xFF;
	bytes[ 5+4] = (program_number>>0)&0xFF;
	bytes[ 6+4] = 0xC1;	// version_number, current_netxt_indicator
	bytes[ 7+4] = 0x00;	// section_number
	bytes[ 8+4] = 0x00;	// last_section_number
	bytes[ 9+4] = ((PcrPid>>8) & 0xFF) | 0xE0;
	bytes[10+4] = ((PcrPid>>0) & 0xFF);
	bytes[11+4] = ((program_info_length>>8) & 0xFF) | 0xF0;
	bytes[12+4] = ((program_info_length>>0) & 0xFF);
	index = 13+4;
	for( n=0; n<nPid; n++ )
	{
	    int elementary_PID = program_detail[n*2+0];
	    int stream_type    = program_detail[n*2+1];
	    fprintf( stdout, "elementary_PID=0x%X\n", elementary_PID );
	    fprintf( stdout, "stream_type   =%d\n", stream_type );
	    bytes[index++] = stream_type;
	    bytes[index++] = ((elementary_PID>>8)&0xFF) | 0xE0;
	    bytes[index++] = ((elementary_PID>>0)&0xFF);
	    int ES_info_length = 0;
	    if( stream_type>0x80 )
	    {
		ES_info_length = 8;
	    	// Dolby
		bytes[index++] = (ES_info_length>>8) | 0xF0;
		bytes[index++] = ES_info_length;
		bytes[index++] = 0x81;
		bytes[index++] = 0x06;
		bytes[index++] = 0x08;
		bytes[index++] = 0x38;
		bytes[index++] = 0x0F;
		bytes[index++] = 0xFF;
		bytes[index++] = 0xEF;
		bytes[index++] = 0x01;
	    } else {
		bytes[index++] = (ES_info_length>>8) | 0xF0;
		bytes[index++] = ES_info_length;
	    }
	}
	bytes[ 3+4] = section_length = index-4;

	unsigned int crc = crc32( &bytes[5], index-5 );
	bytes[index++] = (crc>>24)&0xFF;
	bytes[index++] = (crc>>16)&0xFF;
	bytes[index++] = (crc>> 8)&0xFF;
	bytes[index++] = (crc>> 0)&0xFF;

	return index;
}


int Pes2Tts( FILE *infile, unsigned int off, 
	unsigned int sz, 
	unsigned int PCR, 
	int *nPacket,
	FILE *outfile, int Pid, int rateKB, int bPCR, int bPAT )
{
int s;
int written;
unsigned char packet[192];
int PcrPid=0x101;
	fseek( infile, off, SEEK_SET );
unsigned int nPCR = PCR*300;	// 90kHz->27MHz
#if 0
	fprintf( stdout, "-------------\n" );
	fprintf( stdout, "PCR=%X(%X)\n", PCR, nPCR );
#endif
	fprintf( stdout, "Pes2Tts(%04X:%8X:%d,%d)%8X\n", 
		Pid, PCR, bPCR, bPAT, nPCR );
	// --------------------------------
	// PCR packet
	memset( packet, 0, 192 );
	unsigned char *byteS = &packet[4];
	packet[0] = (nPCR>>24)&0xFF;
	packet[1] = (nPCR>>16)&0xFF;
	packet[2] = (nPCR>> 8)&0xFF;
	packet[3] = (nPCR>> 0)&0xFF;

	byteS[0] = 0x47;
	byteS[1] = (PcrPid>>8)&0x1F;
	byteS[2] = (PcrPid>>0)&0xFF;
	byteS[3] = 0x20;	// adapt+no payload

	byteS[4] = 0x07;	// adapt_len
	byteS[5] = 0x10;	// bPCR=1
	unsigned int nPCR_H = (PCR>>17);
	unsigned int nPCR_L = (PCR<<15) & 0xFFFF8000;
	byteS[ 6] = (nPCR_H>> 8)&0xFF;
	byteS[ 7] = (nPCR_H>> 0)&0xFF;
	byteS[ 8] = (nPCR_L>>24)&0xFF;
	byteS[ 9] = (nPCR_L>>16)&0xFF;
	byteS[10] = (nPCR_L>> 8)&0xFF;
	byteS[11] = (nPCR_L>> 0)&0xFF;

	if( bPCR )
	{
#if 0
	    fprintf( stdout, "%02X %02X : %02X %02X %02X %02X\n",
	    	byteS[6], byteS[7], byteS[8], byteS[9], byteS[10], byteS[11] );
#endif
	    written = fwrite( packet, 1, 192,  outfile );
	}

	if( bPAT )
	{
	    // --------------------------------
	    // PAT packet
	    memset( packet, 0xFF, 192 );
	    nPCR = nPCR + 27000*188/rateKB;
	    packet[0] = (nPCR>>24)&0xFF;
	    packet[1] = (nPCR>>16)&0xFF;
	    packet[2] = (nPCR>> 8)&0xFF;
	    packet[3] = (nPCR>> 0)&0xFF;
#define PROGRAMS1	1
static int ProgramPids1[PROGRAMS1] = { 0x100 };
#define PROGRAMS2	2
static int ProgramPids2[PROGRAMS2] = { 0x100, 0x110 };
	    if( AudioCodec!=5 )
	    MakePat( byteS, ProgramPids1, PROGRAMS1 );
	    else
	    MakePat( byteS, ProgramPids2, PROGRAMS2 );
	    written = fwrite( packet, 1, 192,  outfile );

	    // --------------------------------
	    // PMT packet
	    memset( packet, 0xFF, 192 );
	    nPCR = nPCR + 27000*188/rateKB;
	    packet[0] = (nPCR>>24)&0xFF;
	    packet[1] = (nPCR>>16)&0xFF;
	    packet[2] = (nPCR>> 8)&0xFF;
	    packet[3] = (nPCR>> 0)&0xFF;
#if 1
#define N_PROGRAM1 2
static int Program1[N_PROGRAM1*2] = {
	0x200,  27,	// AVC
	0x201, 129,	// Dolby
};
#define N_PROGRAM2 2
static int Program2[N_PROGRAM2*2] = {
	0x200,  27,	// AVC
	0x201,  15,	// MPEG2-AAC
};
#define N_PROGRAM3 2
static int Program3[N_PROGRAM3*2] = {
	0x200,  27,	// AVC
	0x201,  17,	// MPEG4-AAC:HEAAC
};
#define N_PROGRAM4 2
static int Program4[N_PROGRAM4*2] = {
	0x200,  27,	// AVC
	0x201,   4,	// MPEG2_AUDIO
};
#define N_PROGRAM5 2
static int Program5[N_PROGRAM5*2] = {
	0x200,  27,	// AVC
	0x201,   3,	// MPEG1_AUDIO
};
#if 0
#define N_PROGRAM6 9
static int Program6[N_PROGRAM6*2] = {
	0x200,  27,	// AVC
	0x201, 129,	// Dolby
	0x202,  17,	// HEAAC
	0x203, 129,	// Dolby
	0x204, 129,	// Dolby
	0x205, 129,	// Dolby
	0x206,  17,	// HEAAC
	0x207,  17,	// HEAAC
	0x208,  17,	// HEAAC
};
#else
#define N_PROGRAM6 3
static int Program6[N_PROGRAM6*2] = {
	0x200,  27,	// AVC
	0x201, 129,	// Dolby
	0x205, 129,	// Dolby
};
#define N_PROGRAM7 3
static int Program7[N_PROGRAM7*2] = {
	0x200,  27,	// AVC
	0x202,  17,	// HEAAC
	0x208,  17,	// HEAAC
};
#endif
	    switch( AudioCodec )
	    {
	    case 1 :	// AC3 : Dolby Digital
		MakePmt( byteS, 1, 0x100, 0x101, Program1, N_PROGRAM1 );
		break;
	    case 4 : // MPEG2-AAC
		MakePmt( byteS, 1, 0x100, 0x101, Program2, N_PROGRAM2 );
		break;
	    case 3 : // MPEG4-AAC:HEAAC
		MakePmt( byteS, 1, 0x100, 0x101, Program3, N_PROGRAM3 );
		break;
	    case 2 : // MPEG2_AUDIO
		MakePmt( byteS, 1, 0x100, 0x101, Program4, N_PROGRAM4 );
		break;
	    case 0 : // MPEG1_AUDIO
		MakePmt( byteS, 1, 0x100, 0x101, Program5, N_PROGRAM5 );
		break;
	    case 5 : //	Multi pid
		MakePmt( byteS, 1, 0x100, 0x101, Program6, N_PROGRAM6 );
		written = fwrite( packet, 1, 192,  outfile );
		MakePmt( byteS, 2, 0x110, 0x101, Program7, N_PROGRAM7 );
	    	break;
	    }
	    written = fwrite( packet, 1, 192,  outfile );
#else
	    int PmtPid=0x100;
	    byteS[ 0] = 0x47;
	    byteS[ 1] = ((PmtPid>>8)&0x1F) | 0x40;
	    byteS[ 2] =  (PmtPid>>0)&0xFF;
	    byteS[ 3] = 0x10;	// no adapt+payload
	    if( AudioCodec==1 )	// AC3 : Dolby Digital
	    {
		byteS[ 4] = 0x00;
		byteS[ 5] = 0x02;
		byteS[ 6] = 0xB0;
		byteS[ 7] = 0x1F;	//
		byteS[ 8] = 0x00;
		byteS[ 9] = 0x01;
		byteS[10] = 0xC1;
		byteS[11] = 0x00;
		byteS[12] = 0x00;
		byteS[13] = 0xE1;
		byteS[14] = 0x01;
		byteS[15] = 0xF0;
		byteS[16] = 0x00;
		byteS[17] = 0x1B;
		byteS[18] = 0xE2;
		byteS[19] = 0x00;
		byteS[20] = 0xF0;
		byteS[21] = 0x00;
		// Dolby : 81 + ES_info
		byteS[22] = 0x81;	//
		byteS[23] = 0xE2;
		byteS[24] = 0x01;
		byteS[25] = 0xF0;
		byteS[26] = 0x08;
		// Dolby ES_info
		byteS[27] = 0x81;
		byteS[28] = 0x06;
		byteS[29] = 0x08;
		byteS[30] = 0x38;
		byteS[31] = 0x0F;
		byteS[32] = 0xFF;
		byteS[33] = 0xEF;
		byteS[34] = 0x01;
		// CRC
		byteS[35] = 0x68;
		byteS[36] = 0x09;
		byteS[37] = 0x26;
		byteS[38] = 0xF6;
	    } else if( AudioCodec==4 )	// MPEG2-AAC
	    {
		byteS[ 4] = 0x00;
		byteS[ 5] = 0x02;
		byteS[ 6] = 0xB0;
		byteS[ 7] = 0x17;
		byteS[ 8] = 0x00;
		byteS[ 9] = 0x01;
		byteS[10] = 0xC1;
		byteS[11] = 0x00;
		byteS[12] = 0x00;
		byteS[13] = 0xE1;
		byteS[14] = 0x01;
		byteS[15] = 0xF0;
		byteS[16] = 0x00;
		byteS[17] = 0x1B;
		byteS[18] = 0xE2;
		byteS[19] = 0x00;
		byteS[20] = 0xF0;
		byteS[21] = 0x00;
		// MPEG2-AAC : 0F
		byteS[22] = 0x0F;
		byteS[23] = 0xE2;
		byteS[24] = 0x01;
		byteS[25] = 0xF0;
		byteS[26] = 0x00;
		// CRC
		byteS[27] = 0xB5;
		byteS[28] = 0x57;
		byteS[29] = 0xBE;
		byteS[30] = 0xED;
	    } else if( AudioCodec==3 )	// MPEG4-AAC:HEAAC
	    {
		byteS[ 4] = 0x00;
		byteS[ 5] = 0x02;
		byteS[ 6] = 0xB0;
		byteS[ 7] = 0x17;
		byteS[ 8] = 0x00;
		byteS[ 9] = 0x01;
		byteS[10] = 0xC1;
		byteS[11] = 0x00;
		byteS[12] = 0x00;
		byteS[13] = 0xE1;
		byteS[14] = 0x01;
		byteS[15] = 0xF0;
		byteS[16] = 0x00;
		byteS[17] = 0x1B;
		byteS[18] = 0xE2;
		byteS[19] = 0x00;
		byteS[20] = 0xF0;
		byteS[21] = 0x00;
		// MPEG4-AAC : 11
		byteS[22] = 0x11;
		byteS[23] = 0xE2;
		byteS[24] = 0x01;
		byteS[25] = 0xF0;
		byteS[26] = 0x00;
		// CRC
		byteS[27] = 0xC5;
		byteS[28] = 0x82;
		byteS[29] = 0xFB;
		byteS[30] = 0x7E;
	    } else if( AudioCodec==2 )	// MPEG2_AUDIO
	    {
		byteS[ 4] = 0x00;
		byteS[ 5] = 0x02;
		byteS[ 6] = 0xB0;
		byteS[ 7] = 0x17;
		byteS[ 8] = 0x00;
		byteS[ 9] = 0x01;
		byteS[10] = 0xC1;
		byteS[11] = 0x00;
		byteS[12] = 0x00;
		byteS[13] = 0xE1;
		byteS[14] = 0x01;
		byteS[15] = 0xF0;
		byteS[16] = 0x00;
		byteS[17] = 0x1B;
		byteS[18] = 0xE2;
		byteS[19] = 0x00;
		byteS[20] = 0xF0;
		byteS[21] = 0x00;
		// MPEG2_AUDIO : 04
		byteS[22] = 0x04;
		byteS[23] = 0xE2;
		byteS[24] = 0x01;
		byteS[25] = 0xF0;
		byteS[26] = 0x00;
		// CRC
		byteS[27] = 0x2F;
		byteS[28] = 0xA9;
		byteS[29] = 0x11;
		byteS[30] = 0x7C;
	    } else {	// MPEG1_AUDIO
		byteS[ 4] = 0x00;
		byteS[ 5] = 0x02;
		byteS[ 6] = 0xB0;
		byteS[ 7] = 0x17;
		byteS[ 8] = 0x00;
		byteS[ 9] = 0x01;
		byteS[10] = 0xC1;
		byteS[11] = 0x00;
		byteS[12] = 0x00;
		byteS[13] = 0xE1;
		byteS[14] = 0x01;
		byteS[15] = 0xF0;
		byteS[16] = 0x00;
		byteS[17] = 0x1B;
		byteS[18] = 0xE2;
		byteS[19] = 0x00;
		byteS[20] = 0xF0;
		byteS[21] = 0x00;
		// MPEG1_AUDIO : 03
		byteS[22] = 0x03;
		byteS[23] = 0xE2;
		byteS[24] = 0x01;
		byteS[25] = 0xF0;
		byteS[26] = 0x00;
		// CRC
		byteS[27] = 0xD4;
		byteS[28] = 0x4A;
		byteS[29] = 0x3A;
		byteS[30] = 0x68;
	    }
	    written = fwrite( packet, 1, 192,  outfile );
#endif
	}

	// --------------------------------
	for( s=0; s<sz; s+=184 )
	{
	    int readSize=sz-s;
	    if( readSize>184 )
	    	readSize=184;
	    memset( packet, 0, 192 );
//	    fprintf( stdout, "nPCR=%8X\n", nPCR );
	    nPCR = nPCR + 27000*188/rateKB;
	    packet[0] = (nPCR>>24)&0xFF;
	    packet[1] = (nPCR>>16)&0xFF;
	    packet[2] = (nPCR>> 8)&0xFF;
	    packet[3] = (nPCR>> 0)&0xFF;
/*
	    PID = ((bytes[1]<<8) | (bytes[2]<<0)) & 0x1FFF;
//	    int ts_error     = (bytes[1]>>7)&1;
	    int payloadStart = (bytes[1]>>6)&1;
//	    int ts_priority  = (bytes[1]>>5)&1;
	    int adapt = (bytes[3]>>4)&3;
	    int count = bytes[3]&15;
	    int adapt_len = bytes[4];
	    	switch( adapt )
		{
		case 0 :	// ?
		    fprintf( stdout, "adapt=%d\n", adapt );
		    break;
		case 1 :	// no adapt
		    bPayload[PID]=1;
		    bAdapt  =0;
		    break;
		case 2 :	// adapt
		    bPayload[PID]=0;
		    bAdapt  =1;
		    break;
		case 3 :	// adapt+payload
		    bPayload[PID]=1;
		    bAdapt  =1;
		    break;
		}
*/
	    int head=4;
	    byteS[0] = 0x47;
	    byteS[1] = (Pid>>8)&0x1F;
	    byteS[2] = (Pid>>0)&0xFF;
	    byteS[3] = 0x10 | ((*nPacket)&0xF);
	    if( readSize<=182 )
	    {
	    	head = 188-readSize;
		byteS[3] |= 0x20;	// Adaptation field
		byteS[4] =  head-5;	// Adaptation length
		byteS[5] =  0x00;	// no PCR
	    } else if( readSize<184 )
	    {
//	    	fprintf( stdout, "readSize=%d\n", readSize );
	    	head = 188-readSize;
		byteS[3] |= 0x20;	// Adaptation field
		byteS[4] =  head-5;	// Adaptation length
	    }
	    if( s==0 )
	    	byteS[1] |= 0x40;	// payloadStart
	    fread( &byteS[head], 1, readSize, infile );
#if 0
	    if( (s==0) || (readSize<184) )
	    {
		for( i=0; i<readSize; i++ )
		{
		    fprintf( stdout, "%02X ", packet[4+i] );
		    if( (i%16)==15 )
		    	fprintf( stdout, "\n" );
		}
		fprintf( stdout, "\n" );
	    }
#endif	    
	    written = fwrite( packet, 1, 192,  outfile );
	    if( written<188 )
	    {
	    	fprintf( stdout, "written=%d\n", written );
		exit( 1 );
	    }
	    (*nPacket)++;
	}
//	fprintf( stdout, "nPCR=%8X\n", nPCR );
//	fprintf( stdout, "Pes2Tts() done\n" );
	return nPCR/300;
}

int ParsePes( char *filename, int *Table, int n )
{
int readed;
unsigned char buffer[1024];
unsigned char header[1024];
int head_addr=0;
int l_head_addr=(-1);
int nZero=0;
int total=0;
int state=0;
int header_pos=0;
int nPes=0;
int i;
int pes_len=(-1);
int pes_pos=(-1);

	g_addr = 0;
	FILE *infile = fopen( filename, "rb" );
	if( infile==NULL )
	{
	    fprintf( stdout, "Can't open [%s]\n", filename );
	    exit( 1 );
	}
	while( 1 )
	{
	    readed = gread( buffer, 1, 1024, infile );
	    if( readed<1 )
	    {
//	    	fprintf( stdout, "EOF(0x%X)\n", total );
		break;
	    }
#if 0
	    if( bDisplay==0 )
	    {
	    	if( (g_addr-readed)%0x100000==0 )
		    fprintf( stdout, "%8llX\n", g_addr-readed );
	    }
#endif
	    total+=readed;
	    for( i=0; i<readed; i++ )
	    {
	    	switch( state )
		{
		case 0 :
		    nZero=0;
		    if( buffer[i]==0x00 )
		    {
		    	state++;
			nZero++;
		    } else {
		    }
		    break;
		case 1 :	// 00
		    if( buffer[i]==0x00 )
		    {	// 00 00
		    	state++;
			nZero++;
		    } else {	// 00 XX
			state=0;
		    }
		    break;
		case 2 :	// 00 00
		    if( buffer[i]==0x01 )
		    {	// 00 00 .. 01
		    	state++;
		    } else if( buffer[i]==0x00 )
		    {	// 00 00 00
			nZero++;
		    } else {	// 00 00 .. XX
			state=0;
		    }
		    break;
		case 3 :	// 00 00 01
#if 0
		    if( (buffer[i]==0xC0)
		     || (buffer[i]>=0xE0) )
#else
		    if( (buffer[i]>=0xC0)
		     || (buffer[i]==0xBD) )
#endif
		    {
			memset( header, 0, 1024 );
			head_addr = g_addr-readed+i-3;
			header[0] = 0;
			header[1] = 0;
			header[2] = 1;
			header[3] = buffer[i];
			header_pos=4;
//			fprintf( stdout, "00 00 01 %02X\n", buffer[i] );
		    	state++;
			pes_len = (-1);
			pes_pos = 0;
		    } else {
			state=0;
		    }
		    break;
		// -----------------------
		case 4 :	// 00 00 01 EX
		    pes_pos++;
		    if( header_pos<1024 )
		    {
			header[header_pos++] = buffer[i];
		    }
		    if( header_pos>=9 )
		    {
			int len = header[8];
			pes_len = (header[4]<<8)
			        | (header[5]<<0);
			if( header_pos>(len+8) )
			{
			    state = 5;
			    unsigned int PTSH, PTSL, DTSH, DTSL;
			    unsigned int PTS=0xFFFFFFFF;
			    unsigned int DTS=0xFFFFFFFF;
			    PTSL=0xFFFFFFFF;
			    {
			    	int offset;
				int pes_len = parsePES_header(
				    &header[4], 0,
				    &PTSH, &PTSL, &DTSH, &DTSL, &offset );
				if( PTSL!=0xFFFFFFFF )
				{
				    PTS=PTSL;
				    DTS=DTSL;
				    if( DTS==0xFFFFFFFF )
					DTS=PTS;
				    int dh, dm, ds, dms;
				    int ph, pm, ps, pms;
				    TcTime32( 0, DTS, &dh, &dm, &ds, &dms );
				    TcTime32( 0, PTS, &ph, &pm, &ps, &pms );
				    if( bDisplay )
				    fprintf( stdout, 
		"addr=%8X : DTS=%2d:%02d:%02d.%03d PTS=%2d:%02d:%02d.%03d",
		    head_addr, dh, dm, ds, dms, ph, pm, ps, pms );
				} else {
				    if( bDisplay )
				    fprintf( stdout, 
		"addr=%8X : DTS=--:--:--.--- PTS=--:--:--.---",
					head_addr );
				}
				if( bDisplay )
				{
				    fprintf( stdout, " : "  );
				    if( l_head_addr<0 )
				    {
					fprintf( stdout, "L=%6d,   -  :", 
					    pes_len );
				    } else {
					fprintf( stdout, "L=%6d,%6d:" ,
					    pes_len, head_addr-l_head_addr );
				    }
				    fprintf( stdout, "\n" );
				}
				Table[nPes*TABLE_UNIT+0] = DTS;
				Table[nPes*TABLE_UNIT+1] = PTS;
				Table[nPes*TABLE_UNIT+2] = head_addr;
				if( l_head_addr>=0 )
				    Table[(nPes-1)*TABLE_UNIT+3] 
				    	= head_addr-l_head_addr;
				Table[nPes*TABLE_UNIT+7] = n;
				nPes++;
			    }
			    l_head_addr = head_addr;
			// -------------------------------
			}
		    }
		    break;
		case 5 :
		    if( pes_len>pes_pos )
		    {
		    	pes_pos++;
		    } else {
		    	state = 0;
		    }
		    break;
		}
	    }
	}
	if( nPes>0 )
	    Table[(nPes-1)*TABLE_UNIT+3] = g_addr-l_head_addr;
	fprintf( stdout, "nPes=%d\n", nPes );

	fclose( infile );

	return nPes;
}

int CalcPCR( int Table[], int nPes, int rate )
{
int n;
int BAD=0;
	    for( n=nPes-1; n>=0; n-- )
	    {
	    	int DTS;
		unsigned int PTS, sz;
		int packet;
		DTS = Table[n*TABLE_UNIT+0];
		PTS = Table[n*TABLE_UNIT+1];
		sz  = Table[n*TABLE_UNIT+3];
		int packUnit=(188-4);
		packet = (sz+packUnit-1)/packUnit;
		int ms = packet*188/rate;
		int space = (ms+3)/4;	// for PCR and audio : every 4ms
		Table[n*TABLE_UNIT+6] = space;
		packet += space;
		int next=n+1;
#if 1
		if( next<(nPes-1) )
		{
		    if( DTS>Table[next*TABLE_UNIT+4] )
		    {
		    	DTS = Table[next*TABLE_UNIT+4]
			    - 1*188*90/rate;
//			fprintf( stdout, "Update DTS=%d\n", DTS );
			if( DTS<0 )
			{
			    fprintf( stdout, "DTS[%d]=%d\n", n, DTS );
			    BAD++;
			}
		    }
		}
#endif
		Table[n*TABLE_UNIT+5] = DTS;
		Table[n*TABLE_UNIT+4] = DTS-packet*188*90/rate;
	    }
	    return BAD;
}

/*
Table[][0] DTS
Table[][1] PTS
Table[][2] pos
Table[][3] size
Table[][4] DTSnext-transferTime
Table[][5] DTSnext
*/
int AddM( int MTable[], int Msize, int Table[], int index, int f, int bExpand )
{
int i, m, n;
	for( n=0; n<Msize; n++ )
	{
	    if( MTable[TABLE_UNIT*n+4]==0 )
	    {
#ifdef DEBUG
		fprintf( stdout, "Set(%d:%d)->%d\n", f, index, n );
#endif
		break;
	    }
	    if( Table[TABLE_UNIT*index+4]<MTable[TABLE_UNIT*n+4] )
	    {
		for( m=Msize; m>n; m-- )
		{
		    for( i=0; i<8; i++ )
		    {
			MTable[TABLE_UNIT*m+i] = MTable[TABLE_UNIT*(m-1)+i];
		    }
		}
#ifdef DEBUG
		fprintf( stdout, "Ins(%d:%d)->%d\n", f, index, n );
#endif
		break;
	    }
	}
	if( n==Msize )
	{
	    if( bExpand )
	    {
#ifdef DEBUG
	    fprintf( stdout, "Set(%d:%d)->%d\n", f, index, n );
#endif
	    } else {
	    	return Msize;	// Not expand
	    }
	}
	for( i=0; i<7; i++ )
	{
	    MTable[TABLE_UNIT*n+i] = Table[TABLE_UNIT*index+i];
	}
	MTable[TABLE_UNIT*n+7] =  f;
	return Msize+1;
}

int MergePes( int *Table[], int nPes[], int nFiles, int rateKB,
	      int MTable[], int bExpand )
{
int Msize=0;
int f, n;
	fprintf( stdout, "MergePes() start : nFiles=%d, rateKB=%d\n", 
		nFiles, rateKB );
	for( f=0; f<nFiles; f++ )
	{
	    int bExp = (f==0) ? 1 : 0;
	    if( bExpand )
	    	bExp = 1;
	    for( n=0; n<nPes[f]; n++ )
	    {
	    	Msize = AddM( MTable, Msize, Table[f], n, f, bExp );
	    }
	}
	return Msize;
}

//int DumpTable( int *Table[], int nfile, int n, int diff )
int MakeTts( int *Table[], int nPes[], char *filename[MAX_FILE], int nFiles,
	char *outFilename, int offset, int rateKB, int bAddAudio )
{
FILE *infile[MAX_FILE];
FILE *outfile=NULL;
int n;

	    for( n=0; n<MAX_FILE; n++ )
	    {
	    	infile[n] = NULL;
	    }
	    for( n=0; n<nFiles; n++ )
	    {
		infile[n] = fopen( filename[n], "rb" );
		if( infile[n]==NULL )
		{
		    fprintf( stdout, "Can't open %d:%s\n", n, filename[n] );
		    exit( 1 );
		}
	    }
	    outfile = fopen( outFilename, "wb" );
	    if( outfile==NULL )
	    {
	    	fprintf( stdout, "Can't open %s\n", outFilename );
		exit( 1 );
	    }
	    int nPacket[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	    int bPCR=1;
	    int bPAT=1;
	    int nA=0;
	    int next=0;
	    for( n=0; n<nPes[0]; n++ )
	    {
	    	long long PCR;
		unsigned int DTS, PTS, off, sz;
		DTS = Table[0][n*TABLE_UNIT+0];
		PTS = Table[0][n*TABLE_UNIT+1];
		off = Table[0][n*TABLE_UNIT+2];
		sz  = Table[0][n*TABLE_UNIT+3];
		PCR = Table[0][n*TABLE_UNIT+4]-offset;
		long long nextPCR;
		if( bAddAudio )
		{
		    // Audio PES
		    if( nFiles>1 )
		    {
			while( nA<nPes[1] )
			{
			    int DTS_A = Table[1][nA*TABLE_UNIT+0];
			    int offA  = Table[1][nA*TABLE_UNIT+2];
			    int szA   = Table[1][nA*TABLE_UNIT+3];
			    int PCR_A = Table[1][nA*TABLE_UNIT+4]-offset;
			    if( PCR_A<PCR )
			    {
				nextPCR = PCR_A;
				if( PCR_A<next )
				{
				    nextPCR=next;
			fprintf( stdout, "PCR rewind(%8X->%8X)\n", next, PCR_A);
				}
				if( bDebug )
				fprintf( stdout, 
				    "%16llX : Audio%5d(%8X,%8X)\n", 
				    nextPCR, nA, PCR_A, DTS_A );
				next=Pes2Tts( infile[1], offA, szA, nextPCR,
					&nPacket[1], 
					outfile, 0x201, rateKB, 0, 0 );
				nA++;
			    } else {
				break;
			    }
			}
		    }
		}
		nextPCR = PCR;
		if( PCR<next )
		{
		    nextPCR = next;
		    fprintf( stdout, "PCR rewind(%8X->%8llX)\n", next, PCR );
		}
		if( bDebug )
		fprintf( stdout, 
		    "%16llX : Video%5d(%8llX,%8X)\n", 
		    	nextPCR, n, PCR, DTS );
		next=Pes2Tts( infile[0], off, sz, nextPCR, &nPacket[0], 
			outfile, 0x200, rateKB, bPCR, bPAT );
		bPAT=0;
	    }
	    for( n=0; n<nFiles; n++ )
	    {
		if( infile[n] )
		    fclose( infile[n] );
	    }
	    if( outfile )
		fclose( outfile );

	    return 0;
}

int MakeMergeTts( int Table[], int nPes, int Pid[],
	char *filename[MAX_FILE], int nFiles,
	char *outFilename, int offset, int rateKB )
{
FILE *infile[MAX_FILE];
FILE *outfile=NULL;
int n;
int nPacket[MAX_FILE];

	    for( n=0; n<MAX_FILE; n++ )
	    {
	    	infile[n] = NULL;
		nPacket[n] = 0;
	    }
	    for( n=0; n<nFiles; n++ )
	    {
		infile[n] = fopen( filename[n], "rb" );
		if( infile[n]==NULL )
		{
		    fprintf( stdout, "Can't open %d:%s\n", n, filename[n] );
		    exit( 1 );
		}
	    }
	    outfile = fopen( outFilename, "wb" );
	    if( outfile==NULL )
	    {
	    	fprintf( stdout, "Can't open %s\n", outFilename );
		exit( 1 );
	    }
	    int next=0;
	    int L_PCR=(-1);
	    for( n=0; n<nPes; n++ )
	    {
	    	long long PCR;
		unsigned int DTS, PTS, off, sz, fd;
		DTS = Table[n*TABLE_UNIT+0];
		PTS = Table[n*TABLE_UNIT+1];
		off = Table[n*TABLE_UNIT+2];
		sz  = Table[n*TABLE_UNIT+3];
		PCR = Table[n*TABLE_UNIT+4]-offset;
		fd  = Table[n*TABLE_UNIT+7];
		long long nextPCR = PCR;
		if( PCR<next )
		{
		    nextPCR = next;
		    fprintf( stdout, "PCR rewind(%8X->%8llX)\n", next, PCR );
		}
		if( bDebug )
		fprintf( stdout, 
		    "%16llX : Video%5d(%8llX,%8X)\n", 
		    	nextPCR, n, PCR, DTS );
		int bPCR=0;
		if( (L_PCR<0) || ((PCR-L_PCR)>8000) )	// 100ms<
		if( fd==0 )
		    bPCR = 1;
		int bPAT = ((n==0)           ) ? 1 : 0;
		next=Pes2Tts( infile[fd], off, sz, nextPCR, &nPacket[fd], 
			outfile, Pid[fd], rateKB, bPCR, bPAT );
		if( bPCR )
		    L_PCR = PCR;
		bPAT=0;
	    }
	    for( n=0; n<nFiles; n++ )
	    {
		if( infile[n] )
		    fclose( infile[n] );
	    }
	    if( outfile )
		fclose( outfile );

	    return 0;
}



// ------------------------------------------------------

void pes2tts_Usage( char *prg )
{
	fprintf( stdout, "%s filename [-Ooutname]\n", prg );
	exit( 1 );
}

int pes2tts( int argc, char *argv[] )
{
int i, j;
int args=0;
int nFiles=0;
char *filename[MAX_FILE];
char outFilename[1024];

int *Table[MAX_FILE];
int rateKB=0;
int offset=0;
int bExpand=0;
int Pid[MAX_FILE];
	for( i=0; i<MAX_FILE; i++ )
	{
	    Pid[i] = 0x200+i;
	}
	sprintf( outFilename, "out.mts" );

	for( i=0; i<MAX_FILE; i++ )
	{
	    filename[i] = NULL;
	}
	for( i=1; i<argc; i++ )
	{
	    fprintf( stdout, "arg[%d]=%s\n", i, argv[i] );
	    if( argv[i][0]=='-' )
	    {
		switch( argv[i][1] )
		{
		case 'R' :
		    rateKB = atoi( &argv[i][2] );
		    break;
		case 'D' :
		    bDebug = 1;
		    break;
		case 'O' :
		    sprintf( outFilename, "%s", &argv[i][2] );
		    break;
		default :
		    pes2tts_Usage( argv[0] );
		    break;
		}
	    } else if( argv[i][0]=='+' )
	    {
		switch( argv[i][1] )
		{
		case 'E' :
		    bExpand=1;	// use all pes
		    break;
		case 'D' :
		    bDisplay=1;
		    break;
		case 'M' :
		    MaxDiff = atoi( &argv[i][2] );
		    if( MaxDiff<1 )
		    	MaxDiff= 45000;	// 0.5sec
		    break;
		case 'O' :
		    offset = atoi( &argv[i][2] );
		    break;
		default :
		    pes2tts_Usage( argv[0] );
		    break;
		}
	    } else if( argv[i][0]=='=' )
	    {
		switch( argv[i][1] )
		{
		case 'A' :
		    AudioCodec=atoi( &argv[i][2] );
		    break;
		default :
		    pes2tts_Usage( argv[0] );
		    break;
		}
	    } else {
		switch( args )
		{
		case 0 :
		case 1 :
		case 2 :
		case 3 :
		case 4 :
		case 5 :
		case 6 :
		case 7 :
		case 8 :
		case 9 :
		    filename[nFiles++] = argv[i];
		    fprintf( stdout, "File%d=%s\n", args, filename[args] );
		    fflush( stdout );
		    break;
		default :
		    pes2tts_Usage( argv[0] );
		    break;
		}
		args++;
	    }
	}
	if( filename[0]==NULL )
	{
	    pes2tts_Usage( argv[0] );
	}
	// -------------------------------------------
	// initialize Table
	int n;
	for( n=0; n<nFiles; n++ )
	{
	    Table[n] = (int *)malloc( 4*TABLE_UNIT*1024*1024 );
	    if( Table[n]==NULL )
	    {
		fprintf( stdout, "Can't alloc Table[%d]\n", n );
		exit( 1 );
	    }
	    for( i=0; i<(1024*1024); i++ )
	    {
		for( j=0; j<TABLE_UNIT; j++ )
		{
		    Table[n][i*TABLE_UNIT+j] = 0;
		}
	    }
	}
	// -------------------------------------------
	// Parse PES 
	int nPes[MAX_FILE];
	for( n=0; n<nFiles; n++ )
	{
	    nPes[n] = ParsePes( filename[n], Table[n], n );
	    fprintf( stdout, "%s : %d pes\n", filename[n], nPes[n] );
	}

	// -------------------------------------------
	// Analyze bitrate
#define MAX_RT 601
	unsigned int minRT[MAX_RT];
	unsigned int maxRT[MAX_RT];
	unsigned int delta[MAX_RT];
	int sp=0;
	static int spn[] = { 15, 30, 59, 60, 120, 300, 600, -1 };
	for( n=0; n<MAX_RT; n++ )
	{
	    minRT[n] = 0x7FFFFFFF;
	    maxRT[n] = 0;
	    delta[n] = 0;
	}
	for( n=0; n<nPes[0]; n++ )
	{
	    int sz;
	    if( bDisplay )
	    fprintf( stdout, "%5d : %8X %8X %8X %8X\n",
		n, Table[0][n*TABLE_UNIT+0], Table[0][n*TABLE_UNIT+1], 
		Table[0][n*TABLE_UNIT+2], Table[0][n*TABLE_UNIT+3] );
	    for( sp=0; spn[sp]>0; sp++ )
	    {
#if 0
		fprintf( stdout, "sp=%2d : spn[sp]=%4d\n",
			sp, spn[sp] );
#endif
		if( (n+spn[sp])<nPes[0] )
		{
		    delta[spn[sp]] = Table[0][(n+spn[sp])*TABLE_UNIT+0]
				    -Table[0][(n        )*TABLE_UNIT+0];
		    sz = Table[0][(n+spn[sp])*TABLE_UNIT+2]
		       -Table[0][n*TABLE_UNIT+2];
		    if( sz<minRT[spn[sp]] )
			minRT[spn[sp]] = sz;
		    if( sz>maxRT[spn[sp]] )
			maxRT[spn[sp]] = sz;
		}
	    }
	}
	fprintf( stdout, "delta[spn[sp]] calculated\n" );
	fflush( stdout );
	for( sp=0; spn[sp]>0; sp++ )
	{
	    int rate=(-1);
	    long long maxDataSize = maxRT[spn[sp]]/1024;
	    maxDataSize *= 90000;

	    fprintf( stdout, "%3d : delta=%8d, min=%10d, max=%10d ",
	    	spn[sp],
	    	delta[spn[sp]],
	    	minRT[spn[sp]],
	    	maxRT[spn[sp]] );
	    fflush( stdout );
	    if( delta[spn[sp]]>0 )
	    {
	    	rate = maxDataSize/delta[spn[sp]];
		fprintf( stdout, ": %5d KB/s\n", rate );
	    } else {
	    	fprintf( stdout, "\n" );
	    }
	}
	// -------------------------------------------
	// Calcurate PCR
	// insert PCR packet every 100ms
	// audio may be 300Kbps
	// may have space every 4ms
	if( delta[spn[0]] < 1 )
	{
	    fprintf( stdout, "Can't calculate valid rate\n" );
	    exit( 1 );
	}
	int rate = maxRT[spn[0]]/1024*90000/delta[spn[0]];
	fprintf( stdout, "rate@spn[0]=%d\n", rate );
#if 0
	rate = (rate/100+1)*100;
#else
//	rate = (rate/100+3)*100;
	rate = (rate/100+10)*100;
#endif
	int rateOK=0;
	for( ; ; )
	{
	    fprintf( stdout, "rate=%4d\n", rate );
	    if( CalcPCR( Table[0], nPes[0], rate )!=0 )
	    	break;
// Table[0]=DTS
// Table[1]=PTS
// Table[2]=head_addr
// Table[3]=head_addr-l_head_addr
// Table[4]=DTS'-packet*188*90/rate
// Table[5]=DTS'
// Table[6]=space
	    int maxDiff=0;
	    int nfile=0;
	    for( n=0; n<nPes[nfile]; n++ )
	    {
		int diff = Table[nfile][n*TABLE_UNIT+0]
			  -Table[nfile][n*TABLE_UNIT+5] ;
#if 0
		DumpTable( Table, nfile, n, diff );
#endif
		if( diff>maxDiff )
		{
		    if( diff>180000 )
		    {
			DumpTable( Table, nfile, n+0, diff );
			DumpTable( Table, nfile, n+1, 0 );
		    }
		    fprintf( stdout, "n=%d : maxDiff(%d->%d)\n", 
			n, maxDiff, diff );
		    maxDiff = diff;
		}
	    }
	    fprintf( stdout, "maxDiff=%d\n", maxDiff );
	    if( maxDiff < MaxDiff )
		rateOK = rate;
	    if( maxDiff>180000 )	// 2sec
		break;
	    int rateD = (rate/100-1);
	    rate = rateD*100;
	}
	if( rateKB==0 )
	    rateKB = rateOK;
	fprintf( stdout, "rateKB=%d\n", rateKB );
	fflush( stdout );
// -----------------------------------------------------------------------
	if( rateKB>0 )
	{
	    // Calculate PCR with rateKB
	    int f;
	    for( f=0; f<nFiles; f++ )
	    {
		for( n=nPes[f]-1; n>=0; n-- )
		{
		    CalcPCR( Table[f], nPes[f], rateKB );
		}
	    }
	    int maxDiff=0;
	    for( f=0; f<nFiles; f++ )
	    {
	    	fprintf( stdout, "file=%s, nPES=%d\n", filename[f], nPes[f] );
		fprintf( stdout, 
		    " nPES :    DTS      PTS       addr      sz  :  PCR\n" );
		for( n=0; n<nPes[f]; n++ )
		{
		    int diff = Table[f][n*TABLE_UNIT+0]+offset
			      -Table[f][n*TABLE_UNIT+5] ;
		    DumpTable( Table, f, n, diff );
		    if( diff>maxDiff )
			maxDiff = diff;
		}
	    }
	    int bAddAudio=1;
	    if( nFiles<3 )
	    MakeTts( Table, nPes, filename, nFiles, 
	    	outFilename, offset, rateKB, bAddAudio );
	} else {
	    fprintf( stdout, "Invalid rateKB(%d)\n", rateKB );
	}
	fprintf( stdout, "%s generated\n", outFilename );

	int *MTable = (int *)malloc( 4*TABLE_UNIT*1024*1024 );
	if( MTable==NULL )
	{
	    fprintf( stdout, "Can't malloc\n" );
	    exit( 1 );
	}
	int Msize = MergePes( Table, nPes, nFiles, rateKB, MTable, bExpand );
	for( n=0; n<Msize; n++ )
	{
		fprintf( stdout, "%d: %8d,%8d,%8d\n", 
			MTable[n*TABLE_UNIT+7],	// f
			MTable[n*TABLE_UNIT+0],	// DTS
			MTable[n*TABLE_UNIT+1],	// PTS
			MTable[n*TABLE_UNIT+4] 	// DTSnex
			);
	}
	int c = CalcPCR( MTable, Msize, rateKB );
	fprintf( stdout, "CalcPCR()=%d\n", c );
	for( n=0; n<Msize; n++ )
	{
		fprintf( stdout, "%d: %8d,%8d,%8d\n", 
			MTable[n*TABLE_UNIT+7],	// f
			MTable[n*TABLE_UNIT+0],	// DTS
			MTable[n*TABLE_UNIT+1],	// PTS
			MTable[n*TABLE_UNIT+4] 	// DTSnex
			);
	}
	char ttsFilename[1024];
	sprintf( ttsFilename, "outM.mts" );
	MakeMergeTts( MTable, Msize, Pid,
		filename, nFiles, ttsFilename, offset, rateKB );
	free( MTable );


	return 0;
}

#ifndef MAIN
int bDebug=0;
int main( int argc, char *argv[] )
{
	return pes2tts( argc, argv );
}
#endif

